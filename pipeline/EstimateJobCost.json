{
	"name": "EstimateJobCost",
	"properties": {
		"activities": [
			{
				"name": "LookupJobEstimatedWC",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "AggregateJobEstimatedAWC",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "DECLARE @@EstimatedAWC float\nselect @@EstimatedAWC = EstimatedAWC FROM [HandoffJobForecasting] WHERE TenantId='@{pipeline().parameters.TenantId}' AND LocConfigurationId='@{pipeline().parameters.LocConfigurationId}' AND JobId='@{pipeline().parameters.JobId}'\nselect EstimatedAWC = iif(@@EstimatedAWC is null, 0, @@EstimatedAWC) ",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "dsHandoffJobForecasting",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "AggregateJobEstimatedAWC",
				"type": "ExecuteDataFlow",
				"dependsOn": [],
				"policy": {
					"timeout": "1.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataflow": {
						"referenceName": "dfAggregateJobEstimatedAWC",
						"type": "DataFlowReference",
						"parameters": {
							"TenantId": {
								"value": "'@{pipeline().parameters.TenantId}'",
								"type": "Expression"
							},
							"LocConfigurationId": {
								"value": "'@{pipeline().parameters.LocConfigurationId}'",
								"type": "Expression"
							},
							"JobId": {
								"value": "'@{pipeline().parameters.JobId}'",
								"type": "Expression"
							}
						}
					},
					"compute": {
						"coreCount": 8,
						"computeType": "General"
					},
					"traceLevel": "Fine"
				}
			},
			{
				"name": "Set WordHTLocaleCount",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Lookup WordHTLocaleCount",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "ImageHTLocaleCount",
					"value": {
						"value": "@string(activity('Lookup WordHTLocaleCount').output.firstrow.NumberOfLocales)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "EstimateJobCost",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Set WordHTLocaleCount",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "LookupJobEstimatedWC",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[estimate_jobCost]",
					"storedProcedureParameters": {
						"AdjustedWordCount": {
							"value": {
								"value": "@activity('LookupJobEstimatedWC').output.firstRow.EstimatedAWC",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"ImageCount": {
							"value": "0",
							"type": "Int32"
						},
						"ImageLocaleCount": {
							"value": "0",
							"type": "Int32"
						},
						"JobId": {
							"value": {
								"value": "@pipeline().parameters.JobId",
								"type": "Expression"
							},
							"type": "String"
						},
						"LocConfigurationId": {
							"value": {
								"value": "@pipeline().parameters.LocConfigurationId",
								"type": "Expression"
							},
							"type": "String"
						},
						"TenantId": {
							"value": {
								"value": "@pipeline().parameters.TenantId",
								"type": "Expression"
							},
							"type": "String"
						},
						"WordLocaleCount": {
							"value": {
								"value": "@int(variables('WordHTLocaleCount'))",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Content_Forecasting",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "LookupJobEstimatedCost",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "EstimateJobCost",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "SELECT EstimatedCost FROM [HandoffJobForecasting] WHERE TenantId ='@{pipeline().parameters.TenantId}' AND LocConfigurationId = '@{pipeline().parameters.LocConfigurationId}' AND JobId ='@{pipeline().parameters.JobId}'",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "dsHandoffJobForecasting",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "IsWithinBudget",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "LookupJobEstimatedCost",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@pipeline().globalParameters.financeForecastingApiUrl",
						"type": "Expression"
					},
					"method": "POST",
					"body": {
						"value": "@json(concat('{\"TenantId\":\"',pipeline().parameters.TenantId,'\",\"Amount\":\"',activity('LookupJobEstimatedCost').output.firstRow.EstimatedCost,'\"}'))",
						"type": "Expression"
					}
				}
			},
			{
				"name": "If WithinBudget Set Variable",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "IsWithinBudget",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@activity('IsWithinBudget').output.canWithdraw",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Set IsOverBudgetTrue",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "IsOverBudget",
								"value": "1"
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "Set IsOverBudgetFalse",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "IsOverBudget",
								"value": "0"
							}
						}
					]
				}
			},
			{
				"name": "Update IsOverBudget",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "If WithinBudget Set Variable",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[update_IsOverBudget]",
					"storedProcedureParameters": {
						"isOverBudget": {
							"value": {
								"value": "@variables('IsOverBudget')",
								"type": "Expression"
							},
							"type": "String"
						},
						"jobId": {
							"value": {
								"value": "@pipeline().parameters.JobId",
								"type": "Expression"
							},
							"type": "String"
						},
						"locConfigurationId": {
							"value": {
								"value": "@pipeline().parameters.LocConfigurationId",
								"type": "Expression"
							},
							"type": "String"
						},
						"tenantId": {
							"value": {
								"value": "@pipeline().parameters.TenantId",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "Content_Forecasting",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Lookup WordHTLocaleCount",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "select NumberOfLocales from dbo.Branches \nwhere Guid = '@{pipeline().parameters.LocConfigurationId}'",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "dsBranches",
						"type": "DatasetReference"
					}
				}
			}
		],
		"parameters": {
			"TenantId": {
				"type": "string"
			},
			"LocConfigurationId": {
				"type": "string"
			},
			"JobId": {
				"type": "string"
			}
		},
		"variables": {
			"Price": {
				"type": "String"
			},
			"JobEstimatedAWC": {
				"type": "String"
			},
			"ImageHTLocaleCount": {
				"type": "String",
				"defaultValue": "0"
			},
			"EstimatedJobCost": {
				"type": "String"
			},
			"WordHTLocaleCount": {
				"type": "String",
				"defaultValue": "8"
			},
			"IsOverBudget": {
				"type": "String"
			}
		},
		"folder": {
			"name": "FileIngestion"
		},
		"annotations": [],
		"lastPublishTime": "2022-01-13T20:34:48Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}